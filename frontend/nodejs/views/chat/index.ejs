<head>
  <link rel="stylesheet" type="text/css" href="/css/chat/chatPage.css" />
</head>

<h1>Chat with AI</h1>

<form id="chat-form">
  <textarea type="text" id="prompt" name="prompt" placeholder="Message the AI" rows="2" required></textarea>
  <button type="submit">Send</button>
</form>

<div id="chat-output"></div>

<script>
  // Configure marked options
  marked.setOptions({
    breaks: true,      // Convert \n to <br>
    gfm: true,         // GitHub flavored markdown
    headerIds: false,  // Don't add ids to headers
    sanitize: true    // Prevent script injection
  });

  // Process AI content, separating <think> tags from visible content
  function processAIContent(content) {

    /**
     * Think match section
     * Uses regex to match all content within think tags
     * Regex also matches content to the end if the think tag does not have a closing tag.
     */
    const thinkMatch = content.match(/<think>([\s\S]*?)(?:<\/think>|$)/);
    if (!thinkMatch) {
      return {
        thoughts: "",
        visible: content
      };
    }
    const thoughtContent = thinkMatch[1];
    let visibleContent = content.replace(/<think>[\s\S]*?(?:<\/think>|$)/, "");
    return {
      thoughts: thoughtContent,
      visible: visibleContent
    };
  }

  // Extract complete JSON objects from a buffer string by balancing braces
  function extractJSONObjects(buffer) {
    const objects = [];
    let index = 0;
    while (true) {
      const start = buffer.indexOf('{', index);
      if (start === -1) break;
      let braceCount = 0, inString = false, escape = false;
      let end = start;
      for (; end < buffer.length; end++) {
        const char = buffer[end];
        if (inString) {
          if (escape) {
            escape = false;
          } else if (char === '\\') {
            escape = true;
          } else if (char === '"') {
            inString = false;
          }
        } else {
          if (char === '"') {
            inString = true;
          } else if (char === '{') {
            braceCount++;
          } else if (char === '}') {
            braceCount--;
            if (braceCount === 0) {
              end++; // include the closing brace
              const objStr = buffer.slice(start, end);
              objects.push(objStr);
              index = end;
              break;
            }
          }
        }
      }
      if (braceCount !== 0) break;
    }
    return { objects, remainder: buffer.slice(index) };
  }

  // Function to escape HTML entities to prevent HTML rendering
  function escapeHTML(str) {
    return str.replace(/[&<>"']/g, function (match) {
      const escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
      return escapeMap[match];
    });
  }

  // Append the user's prompt and an empty AI response container to the chat output
  function appendChatMessages(prompt) {
    const messageId = 'ai-response-' + Date.now();
    $('#chat-output').append(`
          <div class="chat-message user-message">
            <strong>You:</strong>
            <pre>${escapeHTML(prompt)}</pre>
          </div>
          <div id="${messageId}" class="chat-message ai-response">
            <strong>AI:</strong>
            <div class="ai-content"></div>
          </div>
        `);
    return document.querySelector(`#${messageId} .ai-content`);
  }

  // Scroll the chat output to the bottom
  function updateScroll() {
    $('#chat-output').scrollTop($('#chat-output')[0].scrollHeight);
  }

  // Render the entire AI response with processed content
  function renderFullResponse(state) {
    // Process the raw content to separate thoughts and visible content
    const processedContent = processAIContent(state.fullRawContent);

    // Clear the existing content in the container before re-rendering
    state.container.innerHTML = '';

    // Check if there are any thoughts to display
    if (processedContent.thoughts.trim()) {
      // Create a <details> element to show thoughts (collapsible)
      const detailsElement = document.createElement('details');
      detailsElement.className = 'ai-think';
      detailsElement.setAttribute('open', ''); // Keep thoughts expanded by default

      // Add a <summary> to label the thoughts section
      const summaryElement = document.createElement('summary');
      summaryElement.textContent = 'Thoughts';
      detailsElement.appendChild(summaryElement);

      // Create a div to hold the markdown-rendered thoughts content
      const innerDiv = document.createElement('div');
      innerDiv.className = 'markdown-content';
      innerDiv.innerHTML = marked.parse(processedContent.thoughts); // Parse thoughts as markdown

      // Append the markdown content inside the <details> element
      detailsElement.appendChild(innerDiv);

      // Add the thoughts section to the container
      state.container.appendChild(detailsElement);
    }

    // Check if there is visible content to display
    if (processedContent.visible) {
      // Create a div for the visible content, rendered as markdown
      const visibleContentDiv = document.createElement('div');
      visibleContentDiv.className = 'markdown-content';
      visibleContentDiv.innerHTML = marked.parse(processedContent.visible); // Parse visible content as markdown

      // Append the visible content to the container
      state.container.appendChild(visibleContentDiv);
    }
  }


  // Process a complete JSON chunk from the SSE
  function processChunk(responseData, state) {
    // Extract content from the chunk
    const content = responseData.choices[0].delta.content;
    // Create a chunk object with an order indicator (using responseData.created)
    const chunk = {
      created: responseData.created,  // assumes a timestamp or sequence number is provided
      content: content
    };
    // Add the chunk to the state.chunks array
    state.chunks.push(chunk);
    // Sort chunks by the created field (oldest first)
    state.chunks.sort((a, b) => a.created - b.created);
    // Rebuild the full raw content by joining the sorted chunk contents
    state.fullRawContent = state.chunks.map(chunk => chunk.content).join('');
    // Render the response with the correctly ordered content
    renderFullResponse(state);
    updateScroll();
  }

  // Handle incoming SSE messages by extracting JSON chunks and processing them
  function handleSSEMessage(event, state) {
    if (event.data === "[DONE]") {
      state.eventSource.close();
      return;
    }
    state.buffer += event.data;
    const { objects, remainder } = extractJSONObjects(state.buffer);
    state.buffer = remainder;
    objects.forEach(objStr => {
      try {
        const responseData = JSON.parse(objStr);
        processChunk(responseData, state);
      } catch (e) {
        console.error("Error parsing chunk:", e, "Chunk:", objStr);
      }
    });
  }

  // Handle SSE error events
  function handleSSEError(state) {
    alert('An error occurred while streaming the response.');
    state.eventSource.close();
  }

  // Set up form submission to start streaming response via SSE
  $(document).ready(function () {
    $('#chat-form').on('submit', function (e) {
      e.preventDefault();
      const prompt = $('#prompt').val();
      $('#prompt').val("");
      adjustTextareaHeight($('#prompt')[0]);

      // Append the messages and set up the container.
      const container = appendChatMessages(prompt);

      // Create an EventSource for SSE.
      const eventSource = new EventSource(`/chat/getChatResponse?prompt=${encodeURIComponent(prompt)}`);

      // State to hold response data and related variables, including the chunks array for ordering.
      const state = {
        fullRawContent: '',
        buffer: "",
        chunks: [],
        container: container,
        eventSource: eventSource
      };

      eventSource.onmessage = function (event) {
        handleSSEMessage(event, state);
      };

      eventSource.onerror = function () {
        handleSSEError(state);
      };
    });

    // Adjust the height of the textarea to fit its content
    function adjustTextareaHeight(textarea) {
      // Reset the height to auto so we can measure the new content height
      textarea.style.height = 'auto';

      // Set the height to the scrollHeight, which will adjust according to content
      textarea.style.height = textarea.scrollHeight + 'px';
    }

    // Handle keydown event to adjust height
    $('#prompt').on('keydown', function (e) {
      // Adjust height on each keydown event
      adjustTextareaHeight(this);

      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault(); // Prevent the default enter behavior (new line)
        $('#chat-form').submit(); // Trigger form submission
      }
    });

    // Handle keydown event to adjust height
    $('#prompt').on('input', function (e) {
      // Adjust height on each input event
      adjustTextareaHeight(this);
    });

    adjustTextareaHeight($('#prompt')[0]);
  });
</script>
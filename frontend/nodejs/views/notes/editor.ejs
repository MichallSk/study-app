    <!-- Reequired script & stylesheet for Quill UI -->
    <head>
        <script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js"></script> 
        <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/quill-cursors@4.0.4/dist/quill-cursors.min.js"></script>
        <link rel="stylesheet" type="text/css" href="/css/notes/notesPage.css" />
    </head>
    
    <!-- Contains scripts from button.ejs -->
    <%- include('buttons') %> <button id="sessionButton">Create Collab Session</button>
    <p> Session Code: <span id="sessionCode"></span></p>
    
    <!-- Note & AI chat container -->
    <div id="notes-container">
        <!-- Notes Editor -->
        <div id="editor-container">
            <div id="editor"></div>
        </div>

        <div id="ai-assistant">
            <h2>Ai Assistant</h2>
            <%- include('../chat/partials/chatSettings.ejs') %>

            <!-- Chat Form -->
            <form id="chat-form">
                <textarea id="prompt" name="prompt" placeholder="Message the AI" rows="1" required></textarea>
                <input type="hidden" id="response-mode" name="mode" value="default">
                <button type="submit">Send</button>
            </form>

            <div id="chat-output"></div>
            <%- include('../chat/partials/ui/chatUIMessages.ejs') %>
            <%- include('../chat/partials/ui/chatUIMarkup.ejs') %>
        </div>
    </div>


    <script>

        Quill.register('modules/cursors', QuillCursors); // Register a module to Quill

        // Quill object for API calls
        const quill = new Quill('#editor', {
            theme: 'snow',
            modules: {
                cursors: true
            }
        });
        
        const cursors = quill.getModule('cursors');


        const data = JSON.parse(sessionStorage.getItem("data")); // Retrieve the data temporarily stored in sessionStorage
        let currentID = data.id; // Set the current Note ID
        let currentSession = new URLSearchParams(window.location.search).get('session'); // gets sessionCode from url parameters
        $('#sessionCode').html(currentSession); // appends to HTML
        quill.setContents(JSON.parse(data.content)); // Append page with loaded note contents

        const ws = new WebSocket('ws://localhost:8001'); // Websocket Object

        ws.addEventListener('open', () => {
            console.log("Successfully Connected");
            ws.send(JSON.stringify({type: "init", content: currentID, session: currentSession})); // Sends note ID to websocket server on first connection
        });

        // Updates view based on message type recieved from wss
        ws.addEventListener('message', (event) => {
            const message = JSON.parse(event.data);
            if (message.type === 'update') { // updates note with contents from another ws client
                try {
                    quill.updateContents(message.data);  // Sync editor view with other websocket connections
                    quill.update();
                } catch (error){
                    console.error('Error parsing message:', error);
                }
            } else if (message.type === 'id') {  
                ws.id = message.data; // stores the ID defined by the wss
                const cursor = cursors.createCursor(ws.id, 'You', 'blue'); // creates this users cursor
            } else if (message.type === 'newClient') { // Adds a new cursor when new ws client connects
                cursors.createCursor(message.data, 'OtherUser', 'red');
            } else if (message.type === 'cursorUpdate') { // Updates page from cursor movements from other ws clients
                if (!cursors.cursors().some(cursor => cursor.id === message.data.id)) { // Adds cursor if the client doesnt exist in the cursor list
                    cursors.createCursor(message.data.id, 'OtherUser', 'red');
                }
                cursors.moveCursor(message.data.id, message.data.range);
                cursors.update();
            }

        });
        

        // Sends changes to the websocket server & controller
        quill.on('text-change', (delta, oldDelta, source) => {
            if(source == 'user') {
                try {
                    const content = JSON.stringify(quill.getContents());
                    fetch('/notes/updateNote', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ content , id: currentID }) // Sends request to update note in db to controller
                    });
                } catch (error) {
                    console.error(error);
                }

                ws.send(JSON.stringify({ type: "sync", content: delta.ops })); // sends updated note contents to websocket server
            }
        });

        // Updates view with other users cursor movements
        quill.on('selection-change', (range, oldRange, source) => {
            if(source == 'user') {
                cursors.moveCursor(ws.id, range);
                cursors.update();
                ws.send(sendMessage('cursorSync', { id: ws.id, range: range }));
            }
        })

        // Generates a collab session code and stores in DB
        $('#sessionButton').on('click', function() {
            if(typeof currentSession !== 'string') { // Creates session if a session doesn't exist
                $.ajax({
                    url: `/notes/generateSession?id=${encodeURIComponent(currentID)}`,
                    method: 'GET',
                    dataType: 'text',
                    success: function(data) {
                        $('#sessionCode').html(data);
                        currentSession = data; // Stores session Code
                        ws.send(sendMessage('newSession', data)); // Sends to wss
                        
                    },
                    error: function(xhr, status, error) {
                        console.error('Error fetching AJAX content:', status, error);
                    }
                });
                
            }
        });

        // Helper function for sending messages to the websocket server
        function sendMessage(messagetype, messagedata) {

            return JSON.stringify({ type: messagetype, data: messagedata });

        }

    </script>

    <!-- AI Chat Processing -->
    <%- include('../chat/partials/chatProcessing.ejs') %>
    <%- include('../chat/partials/chatStream.ejs') %>
